#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace servisForMobile
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DataSource")]
	public partial class profileDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertmenu(menu instance);
    partial void Updatemenu(menu instance);
    partial void Deletemenu(menu instance);
    partial void InserttableOrderItem(tableOrderItem instance);
    partial void UpdatetableOrderItem(tableOrderItem instance);
    partial void DeletetableOrderItem(tableOrderItem instance);
    partial void InserttableOrder(tableOrder instance);
    partial void UpdatetableOrder(tableOrder instance);
    partial void DeletetableOrder(tableOrder instance);
    partial void InsertrestaurantTable(restaurantTable instance);
    partial void UpdaterestaurantTable(restaurantTable instance);
    partial void DeleterestaurantTable(restaurantTable instance);
    partial void InsertmenuItem(menuItem instance);
    partial void UpdatemenuItem(menuItem instance);
    partial void DeletemenuItem(menuItem instance);
    #endregion
		
		public profileDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DataSourceConnectionString1"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public profileDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public profileDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public profileDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public profileDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<menu> menus
		{
			get
			{
				return this.GetTable<menu>();
			}
		}
		
		public System.Data.Linq.Table<tableOrderItem> tableOrderItems
		{
			get
			{
				return this.GetTable<tableOrderItem>();
			}
		}
		
		public System.Data.Linq.Table<tableOrder> tableOrders
		{
			get
			{
				return this.GetTable<tableOrder>();
			}
		}
		
		public System.Data.Linq.Table<restaurantTable> restaurantTables
		{
			get
			{
				return this.GetTable<restaurantTable>();
			}
		}
		
		public System.Data.Linq.Table<menuItem> menuItems
		{
			get
			{
				return this.GetTable<menuItem>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.menu")]
	public partial class menu : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _menuID;
		
		private string _menuName;
		
		private EntitySet<menuItem> _menuItems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmenuIDChanging(int value);
    partial void OnmenuIDChanged();
    partial void OnmenuNameChanging(string value);
    partial void OnmenuNameChanged();
    #endregion
		
		public menu()
		{
			this._menuItems = new EntitySet<menuItem>(new Action<menuItem>(this.attach_menuItems), new Action<menuItem>(this.detach_menuItems));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_menuID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int menuID
		{
			get
			{
				return this._menuID;
			}
			set
			{
				if ((this._menuID != value))
				{
					this.OnmenuIDChanging(value);
					this.SendPropertyChanging();
					this._menuID = value;
					this.SendPropertyChanged("menuID");
					this.OnmenuIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_menuName", DbType="NChar(10)")]
		public string menuName
		{
			get
			{
				return this._menuName;
			}
			set
			{
				if ((this._menuName != value))
				{
					this.OnmenuNameChanging(value);
					this.SendPropertyChanging();
					this._menuName = value;
					this.SendPropertyChanged("menuName");
					this.OnmenuNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="menu_menuItem", Storage="_menuItems", ThisKey="menuID", OtherKey="menuID")]
		public EntitySet<menuItem> menuItems
		{
			get
			{
				return this._menuItems;
			}
			set
			{
				this._menuItems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_menuItems(menuItem entity)
		{
			this.SendPropertyChanging();
			entity.menu = this;
		}
		
		private void detach_menuItems(menuItem entity)
		{
			this.SendPropertyChanging();
			entity.menu = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tableOrderItem")]
	public partial class tableOrderItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _tableOrderItemID;
		
		private System.Nullable<int> _menuItemID;
		
		private System.Nullable<int> _tableOrderID;
		
		private System.Nullable<int> _quantity;
		
		private EntityRef<tableOrder> _tableOrder;
		
		private EntityRef<menuItem> _menuItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntableOrderItemIDChanging(int value);
    partial void OntableOrderItemIDChanged();
    partial void OnmenuItemIDChanging(System.Nullable<int> value);
    partial void OnmenuItemIDChanged();
    partial void OntableOrderIDChanging(System.Nullable<int> value);
    partial void OntableOrderIDChanged();
    partial void OnquantityChanging(System.Nullable<int> value);
    partial void OnquantityChanged();
    #endregion
		
		public tableOrderItem()
		{
			this._tableOrder = default(EntityRef<tableOrder>);
			this._menuItem = default(EntityRef<menuItem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tableOrderItemID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int tableOrderItemID
		{
			get
			{
				return this._tableOrderItemID;
			}
			set
			{
				if ((this._tableOrderItemID != value))
				{
					this.OntableOrderItemIDChanging(value);
					this.SendPropertyChanging();
					this._tableOrderItemID = value;
					this.SendPropertyChanged("tableOrderItemID");
					this.OntableOrderItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_menuItemID", DbType="Int")]
		public System.Nullable<int> menuItemID
		{
			get
			{
				return this._menuItemID;
			}
			set
			{
				if ((this._menuItemID != value))
				{
					if (this._menuItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmenuItemIDChanging(value);
					this.SendPropertyChanging();
					this._menuItemID = value;
					this.SendPropertyChanged("menuItemID");
					this.OnmenuItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tableOrderID", DbType="Int")]
		public System.Nullable<int> tableOrderID
		{
			get
			{
				return this._tableOrderID;
			}
			set
			{
				if ((this._tableOrderID != value))
				{
					if (this._tableOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntableOrderIDChanging(value);
					this.SendPropertyChanging();
					this._tableOrderID = value;
					this.SendPropertyChanged("tableOrderID");
					this.OntableOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quantity", DbType="Int")]
		public System.Nullable<int> quantity
		{
			get
			{
				return this._quantity;
			}
			set
			{
				if ((this._quantity != value))
				{
					this.OnquantityChanging(value);
					this.SendPropertyChanging();
					this._quantity = value;
					this.SendPropertyChanged("quantity");
					this.OnquantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tableOrder_tableOrderItem", Storage="_tableOrder", ThisKey="tableOrderID", OtherKey="tableOrderID", IsForeignKey=true)]
		public tableOrder tableOrder
		{
			get
			{
				return this._tableOrder.Entity;
			}
			set
			{
				tableOrder previousValue = this._tableOrder.Entity;
				if (((previousValue != value) 
							|| (this._tableOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tableOrder.Entity = null;
						previousValue.tableOrderItems.Remove(this);
					}
					this._tableOrder.Entity = value;
					if ((value != null))
					{
						value.tableOrderItems.Add(this);
						this._tableOrderID = value.tableOrderID;
					}
					else
					{
						this._tableOrderID = default(Nullable<int>);
					}
					this.SendPropertyChanged("tableOrder");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="menuItem_tableOrderItem", Storage="_menuItem", ThisKey="menuItemID", OtherKey="menuItemID", IsForeignKey=true)]
		public menuItem menuItem
		{
			get
			{
				return this._menuItem.Entity;
			}
			set
			{
				menuItem previousValue = this._menuItem.Entity;
				if (((previousValue != value) 
							|| (this._menuItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._menuItem.Entity = null;
						previousValue.tableOrderItems.Remove(this);
					}
					this._menuItem.Entity = value;
					if ((value != null))
					{
						value.tableOrderItems.Add(this);
						this._menuItemID = value.menuItemID;
					}
					else
					{
						this._menuItemID = default(Nullable<int>);
					}
					this.SendPropertyChanged("menuItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tableOrder")]
	public partial class tableOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _tableOrderID;
		
		private System.Nullable<int> _tableID;
		
		private System.Nullable<System.DateTime> _time;
		
		private System.Nullable<bool> _isPaid;
		
		private EntitySet<tableOrderItem> _tableOrderItems;
		
		private EntityRef<restaurantTable> _restaurantTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntableOrderIDChanging(int value);
    partial void OntableOrderIDChanged();
    partial void OntableIDChanging(System.Nullable<int> value);
    partial void OntableIDChanged();
    partial void OntimeChanging(System.Nullable<System.DateTime> value);
    partial void OntimeChanged();
    partial void OnisPaidChanging(System.Nullable<bool> value);
    partial void OnisPaidChanged();
    #endregion
		
		public tableOrder()
		{
			this._tableOrderItems = new EntitySet<tableOrderItem>(new Action<tableOrderItem>(this.attach_tableOrderItems), new Action<tableOrderItem>(this.detach_tableOrderItems));
			this._restaurantTable = default(EntityRef<restaurantTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tableOrderID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int tableOrderID
		{
			get
			{
				return this._tableOrderID;
			}
			set
			{
				if ((this._tableOrderID != value))
				{
					this.OntableOrderIDChanging(value);
					this.SendPropertyChanging();
					this._tableOrderID = value;
					this.SendPropertyChanged("tableOrderID");
					this.OntableOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tableID", DbType="Int")]
		public System.Nullable<int> tableID
		{
			get
			{
				return this._tableID;
			}
			set
			{
				if ((this._tableID != value))
				{
					if (this._restaurantTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntableIDChanging(value);
					this.SendPropertyChanging();
					this._tableID = value;
					this.SendPropertyChanged("tableID");
					this.OntableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_time", DbType="DateTime")]
		public System.Nullable<System.DateTime> time
		{
			get
			{
				return this._time;
			}
			set
			{
				if ((this._time != value))
				{
					this.OntimeChanging(value);
					this.SendPropertyChanging();
					this._time = value;
					this.SendPropertyChanged("time");
					this.OntimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isPaid", DbType="Bit")]
		public System.Nullable<bool> isPaid
		{
			get
			{
				return this._isPaid;
			}
			set
			{
				if ((this._isPaid != value))
				{
					this.OnisPaidChanging(value);
					this.SendPropertyChanging();
					this._isPaid = value;
					this.SendPropertyChanged("isPaid");
					this.OnisPaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tableOrder_tableOrderItem", Storage="_tableOrderItems", ThisKey="tableOrderID", OtherKey="tableOrderID")]
		public EntitySet<tableOrderItem> tableOrderItems
		{
			get
			{
				return this._tableOrderItems;
			}
			set
			{
				this._tableOrderItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="restaurantTable_tableOrder", Storage="_restaurantTable", ThisKey="tableID", OtherKey="tableID", IsForeignKey=true)]
		public restaurantTable restaurantTable
		{
			get
			{
				return this._restaurantTable.Entity;
			}
			set
			{
				restaurantTable previousValue = this._restaurantTable.Entity;
				if (((previousValue != value) 
							|| (this._restaurantTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._restaurantTable.Entity = null;
						previousValue.tableOrders.Remove(this);
					}
					this._restaurantTable.Entity = value;
					if ((value != null))
					{
						value.tableOrders.Add(this);
						this._tableID = value.tableID;
					}
					else
					{
						this._tableID = default(Nullable<int>);
					}
					this.SendPropertyChanged("restaurantTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tableOrderItems(tableOrderItem entity)
		{
			this.SendPropertyChanging();
			entity.tableOrder = this;
		}
		
		private void detach_tableOrderItems(tableOrderItem entity)
		{
			this.SendPropertyChanging();
			entity.tableOrder = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.restaurantTable")]
	public partial class restaurantTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _tableID;
		
		private string _tableName;
		
		private System.Nullable<bool> _callWaiter;
		
		private EntitySet<tableOrder> _tableOrders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntableIDChanging(int value);
    partial void OntableIDChanged();
    partial void OntableNameChanging(string value);
    partial void OntableNameChanged();
    partial void OncallWaiterChanging(System.Nullable<bool> value);
    partial void OncallWaiterChanged();
    #endregion
		
		public restaurantTable()
		{
			this._tableOrders = new EntitySet<tableOrder>(new Action<tableOrder>(this.attach_tableOrders), new Action<tableOrder>(this.detach_tableOrders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tableID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int tableID
		{
			get
			{
				return this._tableID;
			}
			set
			{
				if ((this._tableID != value))
				{
					this.OntableIDChanging(value);
					this.SendPropertyChanging();
					this._tableID = value;
					this.SendPropertyChanged("tableID");
					this.OntableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tableName", DbType="NChar(10)")]
		public string tableName
		{
			get
			{
				return this._tableName;
			}
			set
			{
				if ((this._tableName != value))
				{
					this.OntableNameChanging(value);
					this.SendPropertyChanging();
					this._tableName = value;
					this.SendPropertyChanged("tableName");
					this.OntableNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_callWaiter", DbType="Bit")]
		public System.Nullable<bool> callWaiter
		{
			get
			{
				return this._callWaiter;
			}
			set
			{
				if ((this._callWaiter != value))
				{
					this.OncallWaiterChanging(value);
					this.SendPropertyChanging();
					this._callWaiter = value;
					this.SendPropertyChanged("callWaiter");
					this.OncallWaiterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="restaurantTable_tableOrder", Storage="_tableOrders", ThisKey="tableID", OtherKey="tableID")]
		public EntitySet<tableOrder> tableOrders
		{
			get
			{
				return this._tableOrders;
			}
			set
			{
				this._tableOrders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tableOrders(tableOrder entity)
		{
			this.SendPropertyChanging();
			entity.restaurantTable = this;
		}
		
		private void detach_tableOrders(tableOrder entity)
		{
			this.SendPropertyChanging();
			entity.restaurantTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.menuItem")]
	public partial class menuItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _menuItemID;
		
		private System.Nullable<int> _menuID;
		
		private string _itemName;
		
		private string _imageName;
		
		private System.Nullable<decimal> _price;
		
		private EntitySet<tableOrderItem> _tableOrderItems;
		
		private EntityRef<menu> _menu;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmenuItemIDChanging(int value);
    partial void OnmenuItemIDChanged();
    partial void OnmenuIDChanging(System.Nullable<int> value);
    partial void OnmenuIDChanged();
    partial void OnitemNameChanging(string value);
    partial void OnitemNameChanged();
    partial void OnimageNameChanging(string value);
    partial void OnimageNameChanged();
    partial void OnpriceChanging(System.Nullable<decimal> value);
    partial void OnpriceChanged();
    #endregion
		
		public menuItem()
		{
			this._tableOrderItems = new EntitySet<tableOrderItem>(new Action<tableOrderItem>(this.attach_tableOrderItems), new Action<tableOrderItem>(this.detach_tableOrderItems));
			this._menu = default(EntityRef<menu>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_menuItemID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int menuItemID
		{
			get
			{
				return this._menuItemID;
			}
			set
			{
				if ((this._menuItemID != value))
				{
					this.OnmenuItemIDChanging(value);
					this.SendPropertyChanging();
					this._menuItemID = value;
					this.SendPropertyChanged("menuItemID");
					this.OnmenuItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_menuID", DbType="Int")]
		public System.Nullable<int> menuID
		{
			get
			{
				return this._menuID;
			}
			set
			{
				if ((this._menuID != value))
				{
					if (this._menu.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmenuIDChanging(value);
					this.SendPropertyChanging();
					this._menuID = value;
					this.SendPropertyChanged("menuID");
					this.OnmenuIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_itemName", DbType="NChar(20)")]
		public string itemName
		{
			get
			{
				return this._itemName;
			}
			set
			{
				if ((this._itemName != value))
				{
					this.OnitemNameChanging(value);
					this.SendPropertyChanging();
					this._itemName = value;
					this.SendPropertyChanged("itemName");
					this.OnitemNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_imageName", DbType="NChar(20)")]
		public string imageName
		{
			get
			{
				return this._imageName;
			}
			set
			{
				if ((this._imageName != value))
				{
					this.OnimageNameChanging(value);
					this.SendPropertyChanging();
					this._imageName = value;
					this.SendPropertyChanged("imageName");
					this.OnimageNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Decimal(5,2)")]
		public System.Nullable<decimal> price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="menuItem_tableOrderItem", Storage="_tableOrderItems", ThisKey="menuItemID", OtherKey="menuItemID")]
		public EntitySet<tableOrderItem> tableOrderItems
		{
			get
			{
				return this._tableOrderItems;
			}
			set
			{
				this._tableOrderItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="menu_menuItem", Storage="_menu", ThisKey="menuID", OtherKey="menuID", IsForeignKey=true)]
		public menu menu
		{
			get
			{
				return this._menu.Entity;
			}
			set
			{
				menu previousValue = this._menu.Entity;
				if (((previousValue != value) 
							|| (this._menu.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._menu.Entity = null;
						previousValue.menuItems.Remove(this);
					}
					this._menu.Entity = value;
					if ((value != null))
					{
						value.menuItems.Add(this);
						this._menuID = value.menuID;
					}
					else
					{
						this._menuID = default(Nullable<int>);
					}
					this.SendPropertyChanged("menu");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tableOrderItems(tableOrderItem entity)
		{
			this.SendPropertyChanging();
			entity.menuItem = this;
		}
		
		private void detach_tableOrderItems(tableOrderItem entity)
		{
			this.SendPropertyChanging();
			entity.menuItem = null;
		}
	}
}
#pragma warning restore 1591
